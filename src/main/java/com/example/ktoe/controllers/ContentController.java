package com.example.ktoe.controllers;import com.example.ktoe.models.Content;import com.example.ktoe.models.Paragraph;import com.example.ktoe.models.Sentence;import com.example.ktoe.models.Token;import com.example.ktoe.services.ContentService;import java.util.List;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/api/contents")public class ContentController {    private static final Logger logger = LoggerFactory.getLogger(ContentController.class);    private final ContentService contentsService;    public ContentController(ContentService contentService) {        this.contentsService = contentService;    }    @GetMapping("/{contentId}")    public ResponseEntity<Content> getContentById(@PathVariable int contentId) {        Content content = contentsService.getContentById(contentId);        if (content == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(content);    }    @GetMapping("/{contentId}/paragraphs")    public ResponseEntity<List<Paragraph>> getParagraphsByContentId(@PathVariable int contentId) {        List<Paragraph> paragraphs = contentsService.getParagraphsByContentId(contentId);        if (paragraphs == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(paragraphs);    }    @GetMapping("/paragraphs/{paragraphId}/sentences")    public ResponseEntity<List<Sentence>> getSentencesByParagraphId(@PathVariable int paragraphId) {        List<Sentence> sentences = contentsService.getSentencesByParagraphId(paragraphId);        if (sentences == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(sentences);    }    @GetMapping("/sentences/{sentenceId}/tokens")    public ResponseEntity<List<Token>> getTokensBySentenceId(@PathVariable int sentenceId) {        List<Token> tokens = contentsService.getTokensBySentenceId(sentenceId);        if (tokens == null) {            return ResponseEntity.notFound().build();        }        return ResponseEntity.ok(tokens);    }}