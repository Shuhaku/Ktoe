import { LitElement, html, css } from '/lit-core.min.js';export class HomeHeader extends LitElement {  constructor() {    super();    this.activeCategory = null;  }  static properties = {    activeCategory: {type: String},  }  toggleCategory(category) {    this.activeCategory = this.activeCategory === category ? null : category  }  render() {    return html`    <div class="header-container">      <div class="header-top">        <div           class="category-wrapper ${this.activeCategory === 'A1' ? 'active' : ''}"          @click=${() => this.toggleCategory('A1')}        >          <div class="category-btn">A1</div>          <div class="separator"></div>        </div>        <div           class="category-wrapper ${this.activeCategory === 'A2' ? 'active' : ''}"          @click=${() => this.toggleCategory('A2')}        >          <div class="category-btn">A2</div>          <div class="separator"></div>        </div>        <div           class="category-wrapper ${this.activeCategory === 'A3' ? 'active' : ''}"          @click=${() => this.toggleCategory('A3')}        >          <div class="category-btn">A3</div>        </div>      </div>      ${this.activeCategory ? html`        <div class="category-content">          ${this.activeCategory} Content Area        </div>      ` : ''}    </div>  `;  }  static styles = css`    .header-container {      display: flex;      justify-content: center;      align-items: center;      width: 100%;      height: 4rem;      position: relative;    }    .header-top {      display: flex;      justify-content: center;      align-items: center;    }    .category-wrapper {      display: flex;      align-items: center;      cursor: pointer;      transition: all 0.3s;      height: 4rem;    }    .category-btn {      padding: 0.8rem 2rem;      border: none;      font-weight: bold;      color: #5ABEE0;      background-color: #FFFFFF;      transition: all 0.3s;    }    .separator {      width: 2px;      height: 2rem;      background-color: #5ABEE0;      transform: rotate(20deg);      transition: background-color 0.3s;      margin: 0 5px;    }    .category-wrapper:hover .category-btn,    .category-wrapper:hover .separator {      color: #000000;    }    /* Active 상태 */    .category-wrapper.active .category-btn,    .category-wrapper.active .separator {      color: #000000;    }    .category-content {      position: absolute;      bottom: 0;      left: 0;      right: 0;      max-height: 0;      overflow: hidden;      transition: max-height 0.5s ease-out;      display: flex;      justify-content: center;      align-items: center;      font-size: 1.2rem;    }    .category-content[active] {      max-height: 200px;    }    @media (max-width: 768px) {      .header-container {        height: 6rem;      }      .header-top {        padding: 0.8rem;      }      .category-btn {        padding: 0.5rem 1rem;        font-size: 0.9rem;      }    }  `}customElements.define('home-header', HomeHeader)